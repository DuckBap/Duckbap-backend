definitions:
  controllers.Entertainment:
    properties:
      entId:
        type: integer
      imgUrl:
        type: string
      name:
        type: string
    type: object
  controllers.InputUserData:
    properties:
      email:
        type: string
      favoriteArtist:
        type: integer
      nickName:
        type: string
      password1:
        type: string
      password2:
        type: string
      userName:
        type: string
    type: object
  controllers.OutputArtistList:
    properties:
      artistId:
        type: integer
      artistImgUrl:
        type: string
      artistName:
        type: string
      entId:
        type: integer
    type: object
info:
  contact: {}
paths:
  /accounts/sign-up:
    post:
      consumes:
      - application/json
      description: |-
        <br>유저의 정보를 context에 저장하여 미들웨어에게 전달합니다.<br>
        빈 값이 요청되었을 경우 오류 발생위치와 오류 메시지를 반환합니다.<br>
        잘못된 값이 들어왔을 경우 오류 발생위치와 오류 메시지를 반환합니다.<br>
        이미 회원인 경우 오류를 발생시켜 오류 발생위치와 오류 메시지를 반환합니다.<br>
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.InputUserData'
      produces:
      - application/json
      responses:
        "200":
          description: token
          headers:
            user:
              description: token
              type: object
          schema:
            type: ""
        "208":
          description: '이미 존재한 값이 들어올 때", "{"err": {"errorPoint": "message"}}'
          schema:
            type: ""
        "400":
          description: '잘못된 값이 들어올 때", "{"err": {"errorPoint": "message"}}'
          schema:
            type: ""
        "404":
          description: '해당 값을 통해서 회원 가입을 못할 때", "{"err": {"errorPoint": "message"}}'
          schema:
            type: ""
        "424":
          description: '참조할 수 없는 값이 들어올 때", "{"err": {"errorPoint": "message"}}'
          schema:
            type: ""
      summary: 회원가입 요청이 들어왔을 때 동작하는 곳
  /artists/:
    get:
      consumes:
      - application/json
      description: |-
        <br>아티스트 리스트를 반환합니다.<br>
        쿼리스트링이 존재하지 않을 경우 모든 아티스트를 반환합니다.<br>
        쿼리스트링이 존재하는 경우 쿼리스트링을 조건으로 필터링 된 아티스트를 반환합니다.<br>
        쿼리스트링 종류
        1. /v1/artists?ent-id=()
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.OutputArtistList'
            type: array
      summary: 아티스트 리스트
  /ents/:
    get:
      consumes:
      - application/json
      description: <br>엔터테인먼트 리스트를 반환합니다.<br>
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.Entertainment'
            type: array
      summary: 엔터테인먼트 리스트
swagger: "2.0"
